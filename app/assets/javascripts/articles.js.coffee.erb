#= require selectize
#= require jasny-bootstrap.min
#= require ekko-lightbox.min
#= require social
#= require waypoints
#= require waypoints-infinite
#= require prettify
#= require bootstrap/bootstrap-validator
#= require shared/ekko-lightbox-loader
#= require shared/toggle-button
#= require shared/article-summary
#= require shared/bootstrap-video-validator
#= require wysihtml5/wysihtml5-0.4.0pre
#= require wysihtml5/wysihtml5.autoresize
#= require wysihtml5/bootstrap3-wysihtml5
#= require wysihtml5/locales/bootstrap-wysihtml5.fr-FR
#= require editor/custom-wysihtml5-buttons
#= require editor/custom-wysihtml5-image
#= require editor/custom-wysihtml5-link
#= require editor/custom-wysihtml5-templates

window['articles#new'] = (data) ->
  UI.initTagsSelector($('#article_tags'))
  UI.initThemeAndChronologySelects()
  Form.initCreateForm()

window['articles#edit'] = (data) ->
  UI.initTabs()
  UI.initEditor($('#article_body'))
  UI.initTagsSelector($('#article_tags'))
  UI.initThemeAndChronologySelects()
  UI.initTooltips()
  UI.initLadda()
  UI.initMapPositionPicker()

  Form.initEditForm()

  # Binding validation on modals
  $('#modal-add-image').on 'loaded.bs.modal', ->
    Form.initAddImageForm()

  $('#modal-add-image').on 'hide.bs.modal', ->
    $(this).data('bs.modal', null)

  $('#modal-select-image').on 'loaded.bs.modal', ->
    Form.initAddImageForm()

  $('#modal-select-image').on 'hide.bs.modal', ->
    $(this).data('bs.modal', null)

  $('#modal-add-video').on 'loaded.bs.modal', ->
    Form.initAddVideoForm()

window['articles#show'] = (data) ->
  UI.initTabs()
  UI.infineComments()
  UI.initMobileUI()
  UI.sanitizeEditor()

  $('#modal-create-comment').on 'loaded.bs.modal', ->
    Form.initAddCommentForm()

  $('#modal-report-article').on 'loaded.bs.modal', ->
    Form.initCreateReportForm()

  # Refreshing map
  mapController.refresh()

UI =
  initEditor: (@editor) ->
    editor = @editor.wysihtml5('deepExtend', {
        customTemplates: wysiwygTemplates
        useLineBreaks: false
        html: true
        table: true
        stylesheets: ["<%= asset_path('editor.css') %>"]
        locale: 'fr-FR'
        parserRules: {
          classes: {
            "wysiwyg-image": 1
          },
          tags: {
            "div": {
              "check_attributes": {
                "class": "alt"
              }
            }
            "p": {
              "check_attributes": {
                "class": "alt"
              }
            }
            "img": {
              "check_attributes": {
                "width": "numbers"
                "alt": "alt"
                "src": "src"
                "height": "numbers"
                "id": "alt"
                "class": "alt"
              }
            }
            "a": {
              "check_attributes": {
                "href": "src"
              },
              "set_attributes": {
                "rel": "nofollow"
                "target": "_blank"
              }
            },
            "iframe": {
              "check_attributes": {
                  "src": "url"
              }
            },
            "table": {},
            "tr": {
                "add_class": {
                    "align": "align_text"
                }
            },
            "tbody": {
                "add_class": {
                    "align": "align_text"
                }
            },
            "td": {
                "check_attributes": {
                    "rowspan": "numbers",
                    "colspan": "numbers"
                },
                "add_class": {
                    "align": "align_text"
                }
            },
            "tfoot": {
                "add_class": {
                    "align": "align_text"
                }
            },
            "thead": {
                "add_class": {
                    "align": "align_text"
                }
            },
            "th": {
                "check_attributes": {
                    "rowspan": "numbers",
                    "colspan": "numbers"
                },
                "add_class": {
                    "align": "align_text"
                }
            }
          }
        }
    })
    $(document).trigger 'editorInitialized'

  # On mobile device, article's actions are moved to the top
  initMobileUI: ->
    mobileWidth = document.documentElement.clientWidth
    if (Modernizr.touch || $('body').data 'env' == "development") && mobileWidth < 768
      $('#article-control').prependTo $('.article-data').parents('.row')
      $('#search-column').prependTo $('.article-data').parents('.row')
      # Mobile Fix : When showing article-info deselect previous tab
      $('#show_info').click ->
        $('.nav-tabs li.active').removeClass('active')

  initTagsSelector: (@component, @delimiter = ',') ->
    tags_url = $('#data-load-tags').data('load')

    @component.selectize
      plugins: ['remove_button'],
      delimiter:    @delimiter,
      labelField:   'item',
      valueField:   'item',
      searchField:  'item',
      addPrecedence: true,
      preload:       true,
      create:        true,
      load: (query, callback) ->
        if (query.length)
          return callback()

        $.ajax
          url: tags_url,
          type: 'GET',
          success: (res) ->
            callback(res.map (t) -> {item: t})

  initTabs: ->
    $('[data-toggle=tab]').on 'shown.bs.tab', (e) ->
      # Loading comments if they appear
      $.waypoints('refresh')

      # Showing/Hiding links if needed
      if e.target.id == 'show_images' || e.target.id == 'show_videos'
        $('#article-external-notes').hide()
      else
        $('#article-external-notes').show()

      if $('#show_info').hasClass 'mobile-toggle-button-active'
        ButtonToggle.Hide $('#show_info').data 'target'

  infineComments: ->
    debug 'Initializing infinite comments...'
    $('#comments-list').waypoint 'infinite',
      more: '.more-comments-link'
      items: '.comment'
      loadingClass: 'comments-loader'

  initThemeAndChronologySelects: ->
    $('#article_theme_id').selectize()
    $('#article_chronology_id').selectize()

  initTooltips: ->
    $('#bt-save-article').tooltip()

  initLadda: ->
    $('.ladda-button').ladda()

    # Binding remove image handlers
    $('.ladda-button').on 'ajax:before': (e) ->
      $(this).ladda('start')
    $('.ladda-button').on 'ajax:complete': (e) ->
      $(this).ladda('stop')

  initMapPositionPicker: ->
    $('#article-metadatas').on 'nested:fieldAdded:locations': (event) ->
      # Auto click on picker
      mapController.enablePositionPicker()

    # Be careful,
    # Don't know why, event not fired with model name
    # Anyway, article-locations is containing only this model,
    # so I'm using the generic event.
    # - Kevin (140814)
    $('#article-locations').on 'nested:fieldRemoved': (event) ->
      field = event.field.find('input[type=text]')
      # Delete marker
      mapController.delMarkerByLatLng field.val()
      # Remove field from the form
      ###field.parents('.fields:nth(0)').next('input[type=hidden]').remove()
      field.remove()###

    # Load existing markers
    mapController.enableMarkersEdition()

    # Refreshing
    mapController.refresh()

  sanitizeEditor: ->
    isElementEmpty = (element) ->
      return element.is(':empty')

    clearNoContent = (element) ->
      element.contents()
        .filter -> return this.nodeType == 3
        .end()
        .filter("br")
        .remove()

    $('.article-body > h4,h5,h6').each ->
      clearNoContent($(this))

      if isElementEmpty($(this))
        $(this).hide()

Form =
  initCreateForm: ->
    $('#new_article').bootstrapValidator
      live: 'enabled'
      feedbackIcons:
        valid: 'glyphicon glyphicon-ok',
        invalid: 'glyphicon glyphicon-remove',
        validating: 'glyphicon glyphicon-refresh'
      fields:
        'article[title]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})

    $('#new_article').on 'submit': (event) ->
      debug 'Article created'
      GoogleAnalytics.trackEvent 'Contributeurs', window.current_user_nickname

  initEditForm: ->
    $('.edit_article').bootstrapValidator
      fields:
        'article[title]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})

    $('.edit_article').on 'submit': (event) ->
      debug 'Article edited'
      GoogleAnalytics.trackEvent 'Contributeurs', window.current_user_nickname
      GoogleAnalytics.trackEvent 'Contenus populaires', 'Modifications', window.location.href

  initAddImageForm: ->
    $('#new_image').bootstrapValidator
      live: 'enabled'
      fields:
        'image[title]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})
        'image[article_image]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            file:
              extension: 'jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF'
              maxSize: 2048 * 1024
              message: I18n.t("errors.messages.invalid")
      submitHandler: (validator, form, submitButton) ->
        debug 'Image added'
        GoogleAnalytics.trackEvent 'Contributeurs', user
        GoogleAnalytics.trackEvent 'Contenus populaires', 'Modifications', window.location.href

  initAddVideoForm: ->
    $("#new_video").bootstrapValidator
      live: 'enabled'
      feedbackIcons:
        valid: 'glyphicon glyphicon-ok',
        invalid: 'glyphicon glyphicon-remove',
        validating: 'glyphicon glyphicon-refresh'
      fields:
        'video[title]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})
        'video[url]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 16
              message: I18n.t("errors.messages.too_short.other", {count: "16"})
            uri:
              message: I18n.t("errors.messages.invalid_uri")
            videoProvider:
              message: I18n.t("errors.messages.invalid_video_provider")
      submitHandler: (validator, form, submitButton) ->
        debug 'Video added'
        GoogleAnalytics.trackEvent 'Contributeurs', user
        GoogleAnalytics.trackEvent 'Contenus populaires', 'Modifications', window.location.href

  initAddCommentForm: ->
    $('#new_comment').bootstrapValidator
      live: 'enabled'
      fields:
        'comment[content]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})
      submitHandler: (validator, form, submitButton) ->
        debug 'Comment added'
        GoogleAnalytics.trackEvent 'Contenus populaires', 'Commentaires', window.location.href

  initCreateReportForm: ->
    $('#new_report').bootstrapValidator
      live: 'enabled'
      fields:
        'report[description]':
          validators:
            notEmpty:
              message: I18n.t("errors.messages.blank")
            stringLength:
              min: 4
              message: I18n.t("errors.messages.too_short.other", {count: "4"})
